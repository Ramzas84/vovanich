#include <iostream>
#include <vector>
#include <queue>

using namespace std;

typedef vector<vector<char>> Forest;
typedef vector<vector<bool>> Visited;
typedef vector<vector<int>> Way;

struct Coord {
    int x, y;
    Coord (int a, int b) : x(a), y(b) {}
};

void forestReader(Forest& forest, Visited& vis, vector<Coord>& hunters, Coord& esc, Coord& s){
    int x = forest.size();
    int y = forest[0].size();
    for (int i = 0; i < x; ++i){
        for (int j = 0; j < y; ++j){
            char current;
            cin >> current;
            forest[i][j] = current;
            if (current == 'S') s = {i, j};
            if (current == 'E'){
                esc = {i, j};
            }
            if (current == 'T'){
                vis[i][j] = true;
            }
            if ((int(current) > int('0')) && (int(current) <= int('9'))){
                hunters.push_back({i, j});
            }
        }
    }
}

void printForest (Forest& forest){
    for (auto i : forest){
        for (auto j : i) {
            printf ("|%c", j);
        }
        printf ("|\n");
    }
    printf ("\n");
}

bool correctCoord (const Visited& vis, const Coord& chek){
    int x = vis.size();
    int y = vis[0].size();
    if ((chek.x < 0) || (chek.y < 0)) return false;
    if ((chek.x >= vis.size()) || (chek.y >= vis[0].size())) return false;
    return true;
}

int x[4] = {1, -1, 0, 0};
int y[4] = {0, 0, 1, -1};

void step (Visited& vis, Way& way, Coord st, Coord step, queue<Coord>& q){
    Coord cur (st.x + step.x, st.y + step.y);
    if ((correctCoord(vis, cur)) && (!vis[cur.x][cur.y])){
        q.push(cur);
        way[cur.x][cur.y] = way[st.x][st.y] + 1;
        vis[cur.x][cur.y] = true;
    }
}

void relaxRibs(Way& way, Visited& vis, const Coord& esc){
    way[esc.x][esc.y] = 1;
    vis[esc.x][esc.y] = true;
    queue<Coord> q;
    q.push(esc);
    while(!q.empty()){
        Coord cur = q.front();
        q.pop();
        for (int i = 0; i < 4; ++i){
            step(vis, way, cur, {x[i], y[i]}, q);
        }
    }
}

void printWay (Way& way){
    for (auto i : way){
        for (auto j : i) {
            printf ("|%d", j);
        }
        printf ("|\n");
    }
    printf ("\n");
}

int main (){
    int x, y;
    cin >> x >> y;
    Forest forest;
    Visited vis;
    Way way;
    vector<Coord> hunters;
    Coord ex(0, 0);
    Coord s(0, 0);
    
    for (int i = 0; i < x; ++i){
        forest.push_back(vector<char> (y, ' '));
        vis.push_back(vector<bool> (y, false));
        way.push_back(vector<int> (y, 0));
    }
    forestReader (forest, vis, hunters, ex, s);
    relaxRibs (way, vis, ex);
    printForest (forest);
    printWay (way);
    
    int battls = 0;
    for (Coord i : hunters){
        if (way[i.x][i.y] <= way[s.x][s.y]){
            battls += int(forest[i.x][i.y]) - 48;
        }
    }
    cout << battls;
    return 0;
}
